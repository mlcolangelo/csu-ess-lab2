---
title: "Lab 3: COVID-19"
subtitle: 'Ecosystem Science and Sustainability 330'
author:
  - name: Mia Colangelo
    email: miacola@colostate.edu
format:
  html:
    self-contained: true
execute:
  echo: true
---
###Libraries
```{r}
library(tidyverse)
library(flextable)
library(zoo)
library(lubridate)
library(ggplot2)
library(readr)
library(dplyr)
```

###Data
```{r}
url <- "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv"
covid <- read.csv(url)
glimpse(covid)
```

Question 1: Take a moment to reflect on the value of open data: How does easy access to historical and real-time environmental data shape our understanding of climate trends, resource management, and public health? What happens when this data disappears or becomes inaccessible? The role of independent archiving and collaborative stewardship has never been more critical in ensuring scientific progress and accountability.

*Access to truthful and current data is critical to our understanding of the world around us because it aids us in making connections between global trends. When this data is not accessible and understandable to the public, it breeds ignorance and misinformation. People cannot fact check authority figures or press, and researchers cannot rely on poorly constructed data.*

```{r}
my.date <- as.Date("2022-02-01")
my.state <- "Colorado"
```

Question 2: Daily Summary

```{r}
covid_data <- covid

colorado <- covid_data |>
  filter(state == my.state) |>
  group_by(county) |>
  arrange(date) |>
  mutate(new_cases = cases - lag(cases),
         new_deaths = deaths - lag(deaths)) |>
  ungroup()


# Cummulative and New Cases

filter(colorado, date == my.date) |>
  slice_max(cases, n = 5) |>
  select(Date = date, County = county, Cases = cases) |>
  flextable() |>
  set_caption(caption = "Most Cummulative Cases")

filter(colorado, date == my.date) |>
  slice_max(cases, n = 5) |>
  select(Date = date, County = county, Cases = new_cases) |>
  flextable() |>
  set_caption(caption = "Most New Cases")
```
Question 3: Normalizing Data

```{R}
pop_url <- 'https://www2.census.gov/programs-surveys/popest/datasets/2020-2023/counties/totals/co-est2023-alldata.csv'

pop_data <- read.csv(pop_url) |>
  filter(COUNTY != "000") |>
  mutate(fips = sprintf("%05s", paste0(STATE, COUNTY))) |>
  select(fips, contains("NAME"), contains("2021"))
glimpse(pop_data)
```
*This data contains demographic info for 3195 counties in the US in 2021, and include things that could be helpful in this lab's context such as births, deaths, and population counts. The counties are identified by FIPS as well as state and county name.*
```{r}


colorado_data <- pop_data |>
  rename(state = STNAME)|>
  filter(state == "Colorado") |>
  summarize(min_pop = min(POPESTIMATE2021, na.rm = TRUE),
    max_pop = max(POPESTIMATE2021, na.rm = TRUE),
    pop_range = max_pop - min_pop
  )
glimpse(colorado_data)
```
```{r}
pop_data <- pop_data |> mutate(CTYNAME = str_replace(CTYNAME, " County", ""))

covid_data <- covid_data |>
  arrange(county, date) |>
  group_by(county) |> 
  mutate(new_cases = cases - lag(cases, default = 0)) |>
  mutate(new_deaths = deaths - lag(deaths, default = 0)) |>
  ungroup()

colorado_combined <- covid_data |>
  filter(state == "Colorado") |>
  left_join(pop_data |> rename(state = STNAME, county = CTYNAME), by = c("state", "county")) |>
  mutate(
    percapita_cumulative_cases = cases / POPESTIMATE2021,
    percapita_new_cases = new_cases / POPESTIMATE2021,  # Now using computed new_cases
    percapita_new_deaths = new_deaths / POPESTIMATE2021
  )

```

```{r}
CO_counties <- colorado_combined |>
  filter(date == "2021-01-01") |>
  arrange(desc(percapita_cumulative_cases)) |>
  slice_head(n = 5)

ggplot(CO_counties, aes(x = reorder(county, percapita_cumulative_cases), y = percapita_cumulative_cases)) +
  geom_col(fill = "darkblue") +
  labs(
    title = "Top 5 Counties: Cumulative COVID Cases per Capita (2021-01-01)",
    x = "County",
    y = "Cumulative Cases Per Capita"
  ) +
  theme_bw()


CO_new_counties <- colorado_combined |>
  filter(date == "2021-01-01") |>
  arrange(desc(percapita_new_cases)) |>
  slice_head(n = 5)

ggplot(CO_new_counties, aes(x = reorder(county, percapita_new_cases), y = percapita_new_cases)) +
  geom_col(fill = "darkgreen") +
  labs(
    title = "Top 5 Counties: New COVID Cases per Capita (2021-01-01)",
    x = "County",
    y = "New Cases Per Capita"
  ) +
  theme_minimal()
```
Question 4: Rolling Thresholds

```{r}

colorado_combined <- colorado_combined |>
  mutate(date = as.Date(date))

current_date <- max(colorado_combined$date, na.rm = TRUE)

current_data <- colorado_combined |>
  filter(date >= (current_date - 13) & date <= current_date)
```

```{r}
cases_14_summary <- current_data |>
  group_by(county) |>
  summarize(
    total_new_cases = sum(new_cases, na.rm = TRUE),
    population = first(POPESTIMATE2021),
    cases_100k = (total_new_cases / population) * 100000) |>
  arrange(desc(cases_100k))

top_counties <- cases_14_summary |>
  slice_head(n = 5) |>
  print()

top_counties_flextable <- top_counties |>
  flextable() |>
  set_header_labels(
    county = "County",
    total_new_cases = "Total New Cases",
    population = "Population",
    cases_100k = "Cases per 100k"
  ) |>
  colformat_num(j = c("total_new_cases", "population"), big.mark = ",", digits = 0) |>
  colformat_num(j = "cases_100k", digits = 1) |>
  autofit() |>
  theme_booktabs()

top_counties_flextable

```
```{r}
watchlist_data <- cases_14_summary |>
  filter(cases_100k > 100) |>
  nrow()

cat("Number of Counties That Meet the Watchlist Conditions:", watchlist_data)
```


Question 5: Death Toll
```{r}
covid_2021_year <- colorado_combined |>
  filter(date >= "2021-01-01" & date <= "2021-12-31")

total_deaths <- covid_2021_year |>
  group_by(county) |>
  summarize(total_deaths = sum(deaths, na.rm = TRUE))

total_covid_deaths <- covid_2021_year |>
  group_by(county) |>
  summarize(total_covid_deaths = sum(new_deaths, na.rm = TRUE))

deaths_merged <- total_covid_deaths|>
  left_join(total_deaths, by = "county")


deaths_merged <- deaths_merged |>
  mutate(
    covid_death_percentage = (total_covid_deaths / total_deaths) * 100
  ) |>
  arrange(desc(covid_death_percentage)) |>
  glimpse()
```

```{r}
deaths_merged <- deaths_merged |>
  mutate(
    covid_death_ratio = total_covid_deaths / total_deaths
  )

counties_20 <- deaths_merged |>
  filter(covid_death_ratio >= 0.20) |>
  arrange(desc(covid_death_ratio))

ggplot(data = counties_20, mapping = aes(x = county, y = covid_death_ratio)) +
  geom_col(fill = "darkblue") +
  coord_flip() +
  labs(
    title = "Colorado Counties COVID Deaths 20% or More of the Annual Death Toll (2021)",
    x = "County",
    y = "Covid Death Ratio"
  ) +
  theme_minimal()
```

# **Question 6: Multi-state**

```{r}
state_covid <- covid_data |>
  filter(state %in% c("New York", "Colorado", "Alabama", "Ohio")) |>
  group_by(county) |>
  arrange(date) |>
  mutate(new_cases = cases - lag(cases),
         new_deaths = deaths - lag(deaths)) |>
  ungroup()

state_covid <- state_covid |>
  group_by(state, county, date, new_cases) |>
  summarize(daily_new_cases = sum(new_cases, na.rm = TRUE), .groups = "drop") |>
  filter(state %in% c("New York", "Colorado", "Alabama", "Ohio")) |>
  arrange(state, date)

state_covid <- state_covid |>
  mutate(
    daily_new_cases = new_cases - lag(new_cases, default = 0),
    rolling_mean_7day = rollmean(daily_new_cases, 7, fill = NA, align = "right")
  ) |>
  glimpse()

```


```{r}
state_covid <- state_covid |>
  mutate(
    date = as.Date(date),
    daily_new_cases = pmax(daily_new_cases, 0)
  )

ggplot(state_covid, aes(x = date, y = daily_new_cases, fill = state)) +
  geom_col(show.legend = FALSE) + 
  geom_line(aes(y = rolling_mean_7day, color = state), linewidth = 1.2) +
  facet_wrap(~ state, scales = "free_y") +
  scale_x_date(date_breaks = "3 months", date_labels = "%b %Y") +
  labs(
    title = "Daily New COVID Cases with 7-Day Rolling Mean",
    x = "Date",
    y = "New Cases"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

This is as far as I was able to get without errors. Thank you for the time and effort you've put into re-grading things!